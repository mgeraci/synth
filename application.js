// Generated by CoffeeScript 1.3.3
(function() {
  var adsr, init, oscillator;

  $(function() {
    init();
    return $('body').click(function() {
      return adsr();
    });
  });

  init = function() {
    try {
      this.context = new webkitAudioContext();
    } catch (error) {
      alert('Web Audio API is not supported in this browser');
    }
    if (this.context) {
      return oscillator();
    }
  };

  oscillator = function() {
    var osc;
    osc = this.context.createOscillator();
    this.gainnode = this.context.createGainNode();
    osc.connect(this.gainnode);
    this.gainnode.gain.value = 0;
    this.gainnode.connect(context.destination);
    osc.noteOn(0);
    osc.frequency.value = 500;
    return setTimeout(function() {
      return osc.frequency.value = 900;
    }, 500);
  };

  adsr = function(a, d, s, sl, r) {
    var i, numberOfSteps, output, sizeOfSteps, _i,
      _this = this;
    if (a == null) {
      a = 80;
    }
    if (d == null) {
      d = 30;
    }
    if (s == null) {
      s = 100;
    }
    if (sl == null) {
      sl = 0.7;
    }
    if (r == null) {
      r = 20;
    }
    this.grain = 10;
    numberOfSteps = a / this.grain;
    sizeOfSteps = 1 / numberOfSteps;
    output = 0;
    for (i = _i = 0; 0 <= numberOfSteps ? _i < numberOfSteps : _i > numberOfSteps; i = 0 <= numberOfSteps ? ++_i : --_i) {
      setTimeout(function() {
        output += sizeOfSteps;
        return console.log(output);
      }, i * this.grain);
    }
    setTimeout(function() {
      return console.log('start d');
    }, a);
    setTimeout(function() {
      return console.log('start d');
    }, a + d);
    return setTimeout(function() {
      return console.log('start r');
    }, a + d + s);
  };

}).call(this);
