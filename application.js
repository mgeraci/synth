// Generated by CoffeeScript 1.3.3
(function() {
  var adsr, init, oscillator;

  $(function() {
    init();
    return $('button').click(function() {
      return adsr();
    });
  });

  init = function() {
    try {
      this.context = new webkitAudioContext();
    } catch (error) {
      alert('Web Audio API is not supported in this browser');
    }
    if (this.context) {
      return oscillator();
    }
  };

  oscillator = function() {
    var osc;
    osc = this.context.createOscillator();
    this.gainnode = this.context.createGainNode();
    osc.connect(this.gainnode);
    this.gainnode.gain.value = 0;
    this.gainnode.connect(context.destination);
    osc.noteOn(0);
    osc.frequency.value = 500;
    return setTimeout(function() {
      return osc.frequency.value = 900;
    }, 500);
  };

  adsr = function(a, d, s, sl, r) {
    var aNumberOfSteps, aSizeOfSteps, dNumberOfSteps, dSizeOfSteps, grain, i, output, rNumberOfSteps, rSizeOfSteps, _i,
      _this = this;
    if (a == null) {
      a = 80;
    }
    if (d == null) {
      d = 100;
    }
    if (s == null) {
      s = 500;
    }
    if (sl == null) {
      sl = 0.5;
    }
    if (r == null) {
      r = 100;
    }
    grain = 10;
    output = 0;
    aNumberOfSteps = a / grain;
    aSizeOfSteps = 1 / aNumberOfSteps;
    dNumberOfSteps = d / grain;
    dSizeOfSteps = (1 - sl) / dNumberOfSteps;
    rNumberOfSteps = r / grain;
    rSizeOfSteps = sl / rNumberOfSteps;
    for (i = _i = 0; 0 <= aNumberOfSteps ? _i < aNumberOfSteps : _i > aNumberOfSteps; i = 0 <= aNumberOfSteps ? ++_i : --_i) {
      setTimeout(function() {
        output += aSizeOfSteps;
        return _this.gainnode.gain.value = output;
      }, i * grain);
    }
    setTimeout(function() {
      var _j, _results;
      _results = [];
      for (i = _j = 0; 0 <= dNumberOfSteps ? _j < dNumberOfSteps : _j > dNumberOfSteps; i = 0 <= dNumberOfSteps ? ++_j : --_j) {
        _results.push(setTimeout(function() {
          output -= dSizeOfSteps;
          return _this.gainnode.gain.value = output;
        }, i * grain));
      }
      return _results;
    }, a);
    setTimeout(function() {
      var _j, _results;
      _results = [];
      for (i = _j = 0; 0 <= rNumberOfSteps ? _j < rNumberOfSteps : _j > rNumberOfSteps; i = 0 <= rNumberOfSteps ? ++_j : --_j) {
        _results.push(setTimeout(function() {
          output -= rSizeOfSteps;
          return _this.gainnode.gain.value = output;
        }, i * grain));
      }
      return _results;
    }, a + d + s);
    return setTimeout(function() {
      output = 0;
      return _this.gainnode.gain.value = output;
    }, a + d + s + r);
  };

}).call(this);
